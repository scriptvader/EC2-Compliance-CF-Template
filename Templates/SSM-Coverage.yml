AWSTemplateFormatVersion: 2010-09-09
Description: Verify SSM coverage on EC2 instances in your account
Parameters:
  StackName:
    Type: String
    Description: This name would apply to resources in this template.
Resources:
  IamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join
      - ''
      - - !Ref StackName
        - '-role-'
        - !Ref 'AWS::Region'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      Policies:
        PolicyName: !Join
        - ''
        - - !Ref StackName
          - '-policy-'
          - !Ref 'AWS::Region'
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: VisualEditor1
            Effect: Allow
            Action:
            - 'config:PutEvaluations'
            - 'ssm:DescribeInstanceInformation'
            - 'ec2:DescribeInstances'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:PrincipalAccount': !Ref 'AWS::AccountId'
          - Sid: VisualEditor2
            Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            Resource: !Join
            - ''
            - - 'arn:aws:logs:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':*'
          - Sid: VisualEditor3
            Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: !Join
            - ''
            - - 'arn:aws:logs:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':log-group:/aws/lambda/'
              - !Ref StackName
              - '-function-'
              - !Ref 'AWS::Region'
              - ':*'
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: >
          import json

          import boto3

          import datetime


          config = boto3.client('config')

          ssm_client = boto3.client('ssm')

          ec2_client = boto3.client('ec2')


          COMPLIANCE_STATES = {
              'COMPLIANT': 'COMPLIANT',
              'NON_COMPLIANT': 'NON_COMPLIANT',
              'NOT_APPLICABLE': 'NOT_APPLICABLE',
          }



          # Function to check whether the invoking event is ScheduledNotification

          def is_scheduled_notification(invoking_event):
              return invoking_event['messageType'] == 'ScheduledNotification'

          # Function to retrieve instance IDs with SSM enabled

          def fetch_instance_pages():
              token = ''
              while True:
                  page = ssm_client.describe_instance_information(NextToken=token)
                  yield page
                  token = page.get('NextToken')
                  if not token:
                      break

          def fetch_instances():
              for page in fetch_instance_pages():
                  for instance in page['InstanceInformationList']:
                      yield instance

          def get_instance_ids_with_ssm():
              return [instance['InstanceId'] for instance in fetch_instances()]

          def lambda_handler(event, context):
              invoking_event = json.loads(event['invokingEvent'])

              if is_scheduled_notification(invoking_event):
                  try:
                      instance_id_ssm = get_instance_ids_with_ssm()
                      response = ec2_client.describe_instances()
                      instance_ids = [instance['InstanceId'] for reservation in response['Reservations'] for instance in reservation['Instances']]

                      # Prepare evaluation results for AWS Config
                      evaluation_results = []
                      for instance_id in instance_ids:
                          is_compliant = instance_id in instance_id_ssm
                          evaluation_result = {
                              'ComplianceResourceType': 'AWS::EC2::Instance',
                              'ComplianceResourceId': instance_id,
                              'ComplianceType': COMPLIANCE_STATES['COMPLIANT'] if is_compliant else COMPLIANCE_STATES['NON_COMPLIANT'],
                              'Annotation': 'Instance has SSM' if is_compliant else 'Instance does not have SSM',
                              'OrderingTimestamp': datetime.datetime.now()
                          }
                          evaluation_results.append(evaluation_result)

                      # Split evaluation_results into chunks of 100 values
                      chunked_evaluation_results = [evaluation_results[i:i+100] for i in range(0, len(evaluation_results), 100)]

                      for chunk in chunked_evaluation_results:
                          # Initializes the request that contains the evaluation results.
                          put_evaluations_request = {
                              'Evaluations': chunk,
                              'ResultToken': event['resultToken']
                          }

                          # Sends the evaluation results to AWS Config.
                          put_result = config.put_evaluations(Evaluations=chunk, ResultToken=event['resultToken'])

                          if 'FailedEvaluations' in put_result and len(put_result['FailedEvaluations']) > 0:
                              return json.dumps(put_result)

                      return put_result

                  except Exception as e:
                      return str(e)
              else:
                  return 'Invoked for a notification other than Scheduled Notification... Ignoring.'
      FunctionName: !Join
      - ''
      - - !Ref StackName
        - '-function-'
        - !Ref 'AWS::Region'
      Description: >-
        Custom config logic to check ec2 instances that are not valid ssm managed instances
      Handler: index.lambda_handler
      Role: !GetAtt
      - IamRole
      - Arn
      Runtime: python3.11
      Timeout: 60
  ConfigRule:
    Type: 'AWS::Config::ConfigRule'
    Properties:
      ConfigRuleName: !Join
      - ''
      - - !Ref StackName
        - '-config-rule-'
        - !Ref 'AWS::Region'
      Description: >-
        Custom config logic to check ec2 instances that are not valid ssm managed instances
      Source:
        Owner: SSM_LAMBDA
        SourceDetails:
        - EventSource: aws.config
          MessageType: ScheduledNotification
        SourceIdentifier: !GetAtt
        - LambdaFunction
        - Arn
      MaximumExecutionFrequency: TwentyFour_Hours
    DependsOn: ConfigPermissionToCallLambda
  ConfigPermissionToCallLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt
      - LambdaFunction
      - Arn
      Action: 'lambda:InvokeFunction'
      Principal: config.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
Outputs:
  ConfigRuleArn:
    Description: The ARN of the Config Rule
    Value: !GetAtt
    - ConfigRule
    - Arn
  LambdaFunctionArn:
    Description: The ARN of the Lambda function
    Value: !GetAtt
    - LambdaFunction
    - Arn
  IamRoleArn:
    Description: The ARN of the IAM Role
    Value: !GetAtt
    - IamRole
    - Arn
