AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Verify application coverage on SSM managed EC2 instances in your account e.g EDR coverage
Parameters:
  DeploymentName:
    Type: String
    Description: This name would apply to resources in this template.
  Applications:
    Type: String
    Description: >-
      Comma separated list of one or more application names as listed in SSM inventory
    AllowedPattern: '^\w+(,\w+)*$'
  Logic:
    Type: String
    Description: >-
      OR will return compliant if at least one value is true, AND will return complianr only if all values are true
    Default: OR
    AllowedValues:
    - OR
    - AND
Resources:
  IamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join
      - ''
      - - !Ref DeploymentName
        - '-role-'
        - !Ref 'AWS::Region'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      Policies:
      - PolicyName: !Join
        - ''
        - - !Ref DeploymentName
          - '-policy-'
          - !Ref 'AWS::Region'
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: VisualEditor1
            Effect: Allow
            Action:
            - 'config:PutEvaluations'
            - 'ssm:DescribeInstanceInformation'
            - 'ssm:GetInventory'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:PrincipalAccount': !Ref 'AWS::AccountId'
          - Sid: VisualEditor2
            Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            Resource: !Join
            - ''
            - - 'arn:aws:logs:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':*'
          - Sid: VisualEditor3
            Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: !Join
            - ''
            - - 'arn:aws:logs:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':log-group:/aws/lambda/'
              - !Ref DeploymentName
              - '-function-'
              - !Ref 'AWS::Region'
              - ':*'
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment:
        Variables:
          Param1: !Ref Applications
          Param2: !Ref Logic
      Code:
        ZipFile: "import json\n          #magic___^_^___line\nimport boto3\n          #magic___^_^___line\nimport datetime\n          #magic___^_^___line\nimport os\n          #magic___^_^___line\n          #magic___^_^___line\nconfig = boto3.client('config')\n          #magic___^_^___line\nssm_client = boto3.client('ssm')\n          #magic___^_^___line\n          #magic___^_^___line\nCOMPLIANCE_STATES = {\n    'COMPLIANT': 'COMPLIANT',\n    'NON_COMPLIANT': 'NON_COMPLIANT',\n    'NOT_APPLICABLE': 'NOT_APPLICABLE',\n}\n          #magic___^_^___line\n          #magic___^_^___line\n# Function to check whether the invoking event is ScheduledNotification\n          #magic___^_^___line\ndef is_scheduled_notification(invoking_event):\n    return invoking_event['messageType'] == 'ScheduledNotification'\n          #magic___^_^___line\n# Functions to retrieve instance IDs with SSM enabled\n          #magic___^_^___line\n# By default ssm provides a single page with max 10 values, these pre functions loop through the pages\n          #magic___^_^___line\ndef fetch_instance_pages():\n    token = ''\n    while True:\n        page = ssm_client.describe_instance_information(NextToken=token)\n        yield page\n        token = page.get('NextToken')\n        if not token:\n            break\n            #magic___^_^___line\ndef fetch_instances():\n    for page in fetch_instance_pages():\n        for instance in page['InstanceInformationList']:\n            yield instance\n            #magic___^_^___line\ndef get_instance_ids_with_ssm():\n    return [instance['InstanceId'] for instance in fetch_instances()]\n            #magic___^_^___line\n# Function to check SSM Inventory for the specified application in each instance\n            #magic___^_^___line\ndef check_sentinel_agent_in_ssm_inventory(instance_ids):\n            #magic___^_^___line\n    #Retrieve logic and applications variables\n    app_list = os.environ['Applications'].split(',')\n    logic = os.environ['Logic']\n            #magic___^_^___line\n    instances_without_sentinel_agent = []\n    for instance_id in instance_ids:\n        try:\n            if logic == 'OR':\n                response = ssm_client.get_inventory(\n                    Filters=[\n                        {'Key': 'AWS:Application.Name', 'Values': app_list},\n                        {'Key': 'AWS:InstanceInformation.InstanceId', 'Values': [instance_id]}\n                    ]\n                )\n            elif logic == 'AND':\n                filters_list = []\n                for app in app_list:\n                    filters_list.append({'Key': 'AWS:Application.Name', 'Values': [app]})\n                filters_list.append({'Key': 'AWS:InstanceInformation.InstanceId', 'Values': [instance_id]})\n                response = ssm_client.get_inventory(\n                    Filters=filters_list\n                )   \n            if 'Entities' not in response or len(response['Entities']) == 0:\n                instances_without_sentinel_agent.append(instance_id)\n        except ssm_client.exceptions.InvocationDoesNotExist:\n            pass\n    return instances_without_sentinel_agent\n                        #magic___^_^___line\n# --------------- Main ----------------\n                        #magic___^_^___line\ndef lambda_handler(event, context):\n    invoking_event = json.loads(event['invokingEvent'])\n                        #magic___^_^___line\n    if is_scheduled_notification(invoking_event):\n        try:\n            instance_ids = get_instance_ids_with_ssm()\n            instances_without_sentinel_agent = check_sentinel_agent_in_ssm_inventory(instance_ids)\n                        #magic___^_^___line\n            # Prepare evaluation results for AWS Config\n            evaluation_results = []\n            for instance_id in instance_ids:\n                is_non_compliant = instance_id in instances_without_sentinel_agent\n                evaluation_result = {\n                    'ComplianceResourceType': 'AWS::EC2::Instance',\n                    'ComplianceResourceId': instance_id,\n                    'ComplianceType': COMPLIANCE_STATES['NON_COMPLIANT'] if is_non_compliant else COMPLIANCE_STATES['COMPLIANT'],\n                    'Annotation': 'Instance does not have \"sentinelagent\" application in SSM Inventory' if is_non_compliant else 'Instance has \"sentinelagent\" application in SSM Inventory',\n                    'OrderingTimestamp': datetime.datetime.now()\n                }\n                evaluation_results.append(evaluation_result)\n                        #magic___^_^___line\n            # Split evaluation_results into chunks of 100 values\n            chunked_evaluation_results = [evaluation_results[i:i+100] for i in range(0, len(evaluation_results), 100)]\n                        #magic___^_^___line\n            for chunk in chunked_evaluation_results:\n                # Initializes the request that contains the evaluation results.\n                put_evaluations_request = {\n                    'Evaluations': chunk,\n                    'ResultToken': event['resultToken']\n                }\n                        #magic___^_^___line\n                # Sends the evaluation results to AWS Config.\n                put_result = config.put_evaluations(Evaluations=chunk, ResultToken=event['resultToken'])\n                        #magic___^_^___line\n                if 'FailedEvaluations' in put_result and len(put_result['FailedEvaluations']) > 0:\n                    return json.dumps(put_result)\n                        #magic___^_^___line\n            return put_result\n                        #magic___^_^___line\n        except Exception as e:\n            return str(e)\n    else:\n        return 'Invoked for a notification other than Scheduled Notification... Ignoring.'\n"
      FunctionName: !Join
      - ''
      - - !Ref DeploymentName
        - '-function-'
        - !Ref 'AWS::Region'
      Description: >-
        Custom config logic to check ec2 instances on ssm that do not have sentinel one installed using ssm inventory
      Handler: index.lambda_handler
      Role: !GetAtt
      - IamRole
      - Arn
      Runtime: python3.11
      Timeout: 60
  ConfigRule:
    Type: 'AWS::Config::ConfigRule'
    Properties:
      ConfigRuleName: !Join
      - ''
      - - !Ref DeploymentName
        - '-config-rule-'
        - !Ref 'AWS::Region'
      Description: >-
        Custom config rule to check ec2 instances on ssm that do not have sentinel one installed using ssm inventory
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
        - EventSource: aws.config
          MessageType: ScheduledNotification
        SourceIdentifier: !GetAtt
        - LambdaFunction
        - Arn
      MaximumExecutionFrequency: TwentyFour_Hours
    DependsOn: ConfigPermissionToCallLambda
  ConfigPermissionToCallLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt
      - LambdaFunction
      - Arn
      Action: 'lambda:InvokeFunction'
      Principal: config.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
Outputs:
  ConfigRuleArn:
    Description: The ARN of the Config Rule
    Value: !GetAtt
    - ConfigRule
    - Arn
  LambdaFunctionArn:
    Description: The ARN of the Lambda function
    Value: !GetAtt
    - LambdaFunction
    - Arn
  IamRoleArn:
    Description: The ARN of the IAM Role
    Value: !GetAtt
    - IamRole
    - Arn
